---
title: "Model"
author: "Sonika Shrestha"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
#Data Exploration
#Load the dataset
```{r}
data <-read.csv("patients.csv")

```

```{r}
head(data)
```

 
```{r}
new_data <- data 
independent_vars <- c("Pregnancies" , "Glucose" , "BloodPressure", "SkinThickness", "Insulin", "BMI" , "Pedigree", "Age")

# Looping through each independent variable
for (var in independent_vars) {
  # Replacing 0 with NA in the new dataset
  new_data[new_data[, var] == 0, var] <- NA
}
```

```{r}
new_data
```


```{r}
med_data <- new_data
# Replacing NA values with median for each independent variable
for (var in independent_vars){
  # Calculate the median of the variable, ignoring NA values
  med_value<- median(med_data[, var], na.rm=TRUE)
#Replace NA values with the median in the new dataset
  
med_data[is.na(med_data[, var]), var] <- med_value
med_data
}
```
med_data
```{r}
# Create a histogram
hist(med_data$Pregnancies, main = "Distribution of Pregnancies", xlab = "No. of pregnancies", ylab = "Frequency")

hist(med_data$Glucose, main = "Distribution of Glucose", xlab = "Glucose amount", ylab = "Frequency")

hist(med_data$BloodPressure, main = "Distribution of BP", xlab = "Blood Pressure", ylab = "Frequency")

hist(med_data$SkinThickness, main = "Distribution of Skin Thickness", xlab = "Skin Thickness", ylab = "Frequency")

hist(med_data$Insulin, main = "Distribution of Insulin Level", xlab = "Insulin Level", ylab = "Frequency")

hist(med_data$BMI, main = "Distribution of BMI", xlab = "BMI ", ylab = "Frequency")

hist(med_data$Pedigree, main = "Distribution of Pedigree", xlab = "Pedigree", ylab = "Frequency")

hist(med_data$Age, main = "Distribution of Age", xlab = "Age", ylab = "Frequency")

hist(med_data$Diagnosis, main = "Distribution of Diagnosis", xlab = "Daignosis Class", ylab = "Frequency")

```


```{r}
hist(med_data$Pregnancies, main = "Distribution of Pregnancies", xlab = "No. of pregnancies", ylab = "Frequency")
```

```{r}

independent_vars <- c("Pregnancies" , "Glucose" , "BloodPressure", "SkinThickness", "Insulin", "BMI" , "Pedigree", "Age")
#independent_vars <- c("Pregnancies")

for (rows in independent_vars) {
  q1 <- quantile(med_data[[rows]], 0.25, na.rm = TRUE)
  q3 <- quantile(med_data[[rows]], 0.75, na.rm = TRUE)
  iqr <- q3 - q1
  lower_bound <- q1 - 1.5 * iqr
  upper_bound <- q3 + 1.5 * iqr
  
  # Perform winsorization on the specific variable
  med_data[[rows]] <- ifelse(med_data[[rows]] < lower_bound, lower_bound,
                             ifelse(med_data[[rows]] > upper_bound, upper_bound, med_data[[rows]]))
}

corr_data <- med_data
corr_data

```


```{r}
# Create a histogram after winsorization
hist(med_data$Pregnancies, main = "Distribution of Pregnancies", xlab = "No. of pregnancies", ylab = "Frequency")

hist(med_data$Glucose, main = "Distribution of Glucose", xlab = "Glucose amount", ylab = "Frequency")

hist(med_data$BloodPressure, main = "Distribution of BP", xlab = "Blood Pressure", ylab = "Frequency")

hist(med_data$SkinThickness, main = "Distribution of Skin Thickness", xlab = "Skin Thickness", ylab = "Frequency")

hist(med_data$Insulin, main = "Distribution of Insulin Level", xlab = "Insulin Level", ylab = "Frequency")

hist(med_data$BMI, main = "Distribution of BMI", xlab = "BMI ", ylab = "Frequency")

hist(med_data$Pedigree, main = "Distribution of Pedigree", xlab = "Pedigree", ylab = "Frequency")

hist(med_data$Age, main = "Distribution of Age", xlab = "Age", ylab = "Frequency")

hist(med_data$Diagnosis, main = "Distribution of Diagnosis", xlab = "Daignosis Class", ylab = "Frequency")

```

```{r}
#Create a correlogram
# Load the required libraries
library(corrplot)
library(ggplot2)

# Load your dataset (assuming it's already imported or available)
# Make sure the dataset contains your independent variables and dependent variable

# Calculate the correlation matrix
correlation_matrix <- cor(corr_data[, c("Pregnancies", "Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI", "Pedigree", "Age", "Diagnosis")])

# Visualize the correlogram
corrplot(correlation_matrix, method = "color", type = "upper", order = "hclust", tl.col = "black", tl.srt = 45, addCoef.col = "black")

# Find the correlation coefficients of the dependent variable (Diagnosis)
cor_with_diagnosis <- abs(correlation_matrix[,"Diagnosis"])

# Set a threshold for selecting the best features (e.g., absolute correlation > 0.3 or 0.5)
threshold <- 0.3

# Select the independent variables with correlation above the threshold
best_features <- names(cor_with_diagnosis[cor_with_diagnosis > threshold])

# Print the best features
print(best_features)



  
  
```

# Gaussian distribution for our best features

```{r}
#Extract the features
Glucose <- med_data$Glucose
BMI <- med_data$BMI

#Gaussaian Distribution

glucose_nd <- scale(Glucose)
BMI_nd <- scale(BMI)

#hist(med_data$BMI, main = "Distribution of BMI", xlab = "BMI ", ylab = "Frequency")
```

```{r}

hist(glucose_nd, main = "Standardized Glucose", xlab = "Glucose level ", ylab = "Frequency")
hist(BMI_nd, main = "Standardized BMI", xlab = "BMI ", ylab = "Frequency")
```
```{r}
#Create a data set with best features and diagnosis
model_data <- data.frame(Glucose = glucose_nd, BMI = BMI_nd, Diagnosis = med_data$Diagnosis)
model_data

#Using a caret we will split out dataset into training and testing set
#install.packages("caret")
library(caret)

#Split the dataset
set.seed(123) #for reproducibility
train_indices <-createDataPartition(med_data$Diagnosis, p=0.8, list = FALSE)

train_data <- model_data[train_indices,]
test_data <- model_data[-train_indices,]
```
```{r}
#Train model

model <- glm(Diagnosis ~ Glucose + BMI, data = train_data, family = binomial)
model

prediction <- predict(model, new_data = test_data, type = "response")
```

```{r}
# Assuming that the dependent variable is a factor, convert the predictions to binary class labels
prediction <- ifelse(prediction >= 0.5, 1, 0)

# Compute evaluation metrics
accuracy <- mean(prediction == test_data$Diagnosis)
accuracy
precision <- sum(prediction == 1 & test_data$Diagnosis == 1) / sum(prediction == 1)
precision

recall <- sum(prediction == 1 & test_data$Diagnosis == 1) / sum(test_data$Diagnosis == 1)
recall

```

